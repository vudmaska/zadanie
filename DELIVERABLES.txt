1. Introduce article delete functionality DELETE http://localhost:8080/articles/{articleId} where article with articleId is deleted from database

2. Introduce Comments into the system. Every Article can have multiple comments.
   Comment consists of - Author, Text, Created Date. 

   List of all articles (GET http://localhost:8080/articles) should NOT include comments.
   Returning single article details (GET http://localhost:8080/articles/{articleId}) should include list of comments that belongs to article

   Create API for creating, deleting and reading comments, comments cannot exist without article assigned

3. We need a way to ingest large number of articles at once from a file. 

   ArticleIngester should load articles_to_ingest.txt file, parse present articles in JSON format and store all of them into the DB.

4. GET http://localhost:8080/articles/search/{searchText} functionality needs to be implemented.

   This should return list of all articles where author, title or text contains the searched text.

5. GET http://localhost:8080/authors/stats functionality needs to be implemented.

   This should return list of all article authors with number of articles written by them.
   Use already provided AuthorStats DTO. See AuthorDAO.findAll() for inspiration.

6. Introduce appropriate error handling to the code (with meaningful return messages and appropriate HTTP status code)

BONUS CHALLENGE (HARD - Do it in separate branch): Rework database layer of the application so that it used Spring Data framework (https://docs.spring.io/spring-data/jpa/docs/current/reference/html/) for all database interactions. 
